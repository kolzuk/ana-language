#ifndef BYTECODE_H
#define BYTECODE_H

enum Operation : char {
  /// Берёт два значения из стека операндов, суммирует их, и кладёт полученное значение обратно в операндовый стек.
  ADD,

  /// Берёт два значения из стека операндов, вычитает одно значение из другого,
  /// и кладёт полученное значение обратно в операндовый стек.
  SUB,

  /// Берёт два значения из стека операндов, умножает их,
  /// и кладёт полученное значение обратно в операндовый стек.
  MUL,

  /// Берёт два значения из стека операндов, делит одно значение на другое,
  /// и кладёт полученное значение обратно в операндовый стек.
  DIV,

  /// Берёт два значения из стека операндов, берёт одно значение по модулю второго,
  /// и кладёт полученное значение обратно в операндовый стек.
  MOD,

  /// Кладёт значение в операндовый стек (только 8-и байтное значение)
  /// Например: PUSH "8"
  PUSH,

  /// Загружает значение переменной в операндовый стек (только 8-и байтное значение)
  /// Например: LOAD "a"
  LOAD,

  /// Загружает указатель массива в операндовый стек (только 8-и байтное значение)
  /// Например: ARRAY_LOAD "array"
  ARRAY_LOAD,

  /// Загружает значение массива в позиции i в операндовый стек (только 8-и байтное значение)
  /// Например: LOAD_FROM_INDEX "array" 2
  /// Например: LOAD_FROM_INDEX 12, 3
  LOAD_FROM_INDEX,

  /// Загружает в значение переменной значение из операндового стека (только 8-и байтное значение).
  /// Например: STORE "a"
  STORE,

  /// Загружает в значение элемента массива по индексу
  /// значение из операндового стека (только 8-и байтное значение).
  /// Индекс берёт из стека.
  /// Например: STORE_IN_INDEX "a"
  STORE_IN_INDEX,

  /// Инициализирует массив. Предварительно нужно положить размер массива
  /// в операндовый стек.
  /// Например: PUSH 10; NEW ARRAY "array"; // создаёт массив размером 10.
  NEW_ARRAY,

  /// Выводит в std::cout последнее значение из операндового стека.
  /// Например: PUSH 1; PRINT; // std::cout << 10; значение из операндового стека убирается.
  PRINT,

  /// Вызывает указанную функцию, параметры передаются через операндовый стек.
  /// Например: PUSH 1; LOAD a; CALL SUM;
  /// Код выше эквивалентен соответствующему: SUM(a, 1);
  CALL,

  /// Возвращает верхнее значение из операндового стека в операндовый стек вызываемого стекфрейма.
  /// Сдвигает текущий указатель исполнения кода на вызвавший его стекфрейма.
  /// Например: PUSH 1; RETURN;
  RETURN,

  /// Создаёт LABEL
  /// Например: LABEL "condition"
  LABEL,

  /// Перемещает текущий указатель инструкции на заданный.
  /// Например: JUMP "condition"
  JUMP,

  /// Сравнивает два числа из операндового стека, кладёт результат в флаги EQ, NE, LT, LE, GT, GE
  /// Например: PUSH 2; PUSH 3; CMP;
  CMP,

  /// Прыгает на заданную метку если флаг EQ = true
  JUMP_EQ,

  /// Прыгает на заданную метку если флаг NE = true
  JUMP_NE,

  /// Прыгает на заданную метку если флаг LT = true
  JUMP_LT,

  /// Прыгает на заданную метку если флаг LE = true
  JUMP_LE,

  /// Прыгает на заданную метку если флаг GT = true
  JUMP_GT,

  /// Прыгает на заданную метку если флаг GE = true
  JUMP_GE,

  /// Декларирует функцию следующим.
  /// Например: FUN_BEGIN foo int a, int b, array arr
  FUN_BEGIN,

  /// Пометка о том, что функция закончилась.
  FUN_END,
};

#endif //BYTECODE_H
